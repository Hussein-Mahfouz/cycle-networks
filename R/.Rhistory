sum(graph_sf_cycle$d)
# We need to add a column in graph_sf to identify all edges with cycle infrastructure
# add a cycle_infra column to graph_sf_cycle and give all edges a value of 1, then
# join with graph_sf
graph_sf_cycle <-
graph_sf_cycle %>% st_drop_geometry() %>%
mutate(cycle_infra= 1) %>%
dplyr::select(c(edge_id, cycle_infra))
# this will add the cycle_infra column to the original graph_sf
graph_sf <- dplyr::left_join(graph_sf, graph_sf_cycle, by = "edge_id")
# all NA values in cycle_infra are those that had nothing to join to. It means they have no
# cycling infrastructure. We will give them a value of 0 for cycle_infra
graph_sf$cycle_infra[is.na(graph_sf$cycle_infra)] <- 0
# save it as an RDS
saveRDS(graph_sf, file = paste0("../data/", chosen_city, "/graph_with_flows_weighted.Rds"))
###### FUNCTION TO ADD BINARY COLUMN INDICATING THE PRESENCE OF CYCLING INFRASTRUCTURE #####
# Turn the above into a function so I can use it with aggregated-flow graphs outputed using different
# weighting profiles
infra_exists <- function(graph, network){
# create a combined geometry with all edges matching either of the two conditions
graph_cycle <- network %>%
filter(highway == 'cycleway' | bicycle == 'designated' | cycleway == 'track') %>%
st_combine()
# Get all features of graph_sf that have dedicated cycling infrastructure
sel_sgbp <- st_within(x=graph, y=graph_cycle)
sel_logical <- lengths(sel_sgbp) > 0
graph_cycle <- graph[sel_logical, ]
# We need to add a column in graph_sf to identify all edges with cycle infrastructure
# add a cycle_infra column to graph_sf_cycle and give all edges a value of 1, then
# join with graph
graph_cycle <-
graph_cycle %>% st_drop_geometry() %>%
mutate(cycle_infra= 1) %>%
dplyr::select(c(edge_id, cycle_infra))
#join the cycle_infra column to the original graph
graph <- dplyr::left_join(graph, graph_sf_cycle, by = "edge_id")
# all NA values in cycle_infra are those that had nothing to join to. It means they have no
# cycling infrastructure. We will give them a value of 0 for cycle_infra
graph$cycle_infra[is.na(graph$cycle_infra)] <- 0
return(graph)
}
# Read in the other graphs, add column for cycling infrastrucure, then overwrite
graph_sf_unweight <- readRDS(paste0("../data/", chosen_city,"/graph_with_flows_unweighted.RDS"))
graph_sf_unweight <- infra_exists(graph=graph_sf_unweight, network=streetnet2)
saveRDS(graph_sf_unweight, file = paste0("../data/", chosen_city, "/graph_with_flows_unweighted.Rds"))
# graph_sf_trunk <- readRDS(paste0("../data/", chosen_city,"/graph_with_flows_trunk.RDS"))
# graph_sf_trunk <- infra_exists(graph_sf_trunk, streetnet2)
# saveRDS(graph_sf_trunk, file = paste0("../data/", chosen_city, "/graph_with_flows_trunk.Rds"))
#clean environment
rm(bicycle, cycle_designated, cycle_tracks, cycleway, cycleways, graph_sf,
graph_sf_cycle, graph_sf_trunk, graph_sf_unweight,
highway, lanes, maxspeed, msoa_centroids, pts, segregated,
sel_sgbp, streetnet, streetnet2, sel_logical, p, p1, p2, p3, p4, infra_exists)
library(tidyverse)
library(sf)
library(tmap)
graph_sf_weighted <- readRDS(paste0("../data/", chosen_city,"/graph_with_flows_weighted.RDS"))
graph_sf_unweight <- readRDS(paste0("../data/", chosen_city,"/graph_with_flows_unweighted.RDS"))
#graph_sf_trunk <- readRDS(paste0("../data/", chosen_city,"/graph_with_flows_trunk.RDS"))
plot(graph_sf_weighted['flow'])
# we want to know the total person-kilometres traveled on each road type
# 1. multiply flow by distance to get person-km on each edge
# 2. group by highway type
# 3. get total and % of person-km on each highway type
dist_weight <- graph_sf_weighted %>% st_drop_geometry() %>%
# we add the weighted-distance column before grouping because we can't get it after grouping
mutate(sum_weighted_dist = sum(d*flow)) %>%
group_by(highway) %>%
summarize(dist = sum(d*flow) /1000,         # this is the total person-km per highway type
dist_perc = ((sum(d*flow)) / mean(sum_weighted_dist)) * 100) %>% #same as above but as %
mutate(weighting = 'weighted')
dist_unw <- graph_sf_unweight %>% st_drop_geometry() %>%
mutate(sum_weighted_dist = sum(d*flow)) %>%
group_by(highway) %>%
summarize(dist = sum(d*flow) /1000,
dist_perc = ((sum(d*flow)) / mean(sum_weighted_dist)) * 100) %>%
mutate(weighting = 'unweighted')
# dist_tr <- graph_sf_trunk %>% st_drop_geometry() %>%
#   mutate(sum_weighted_dist = sum(d*flow)) %>%
#   group_by(highway) %>%
#   summarize(dist = sum(d*flow) /1000,
#             dist_perc = ((sum(d*flow)) / mean(sum_weighted_dist)) * 100) %>%
#   mutate(weighting = 'trunk permitted')
# remove some highway types
person_km <- rbind(dist_weight, dist_unw)
# exploratory plot
ggplot(data=dist_weight, aes(x=highway, y=dist_perc))+
geom_col() + coord_flip()
#remove highway types that have very little share (for plotting purposes)
person_km <- person_km %>%
dplyr::filter(!(highway %in% c('trunk_link', 'track', 'tertiary_link', 'steps',
'secondary_link', 'primary_link', 'living_street',
'motorway_link')))
# plot % of person-km on each highway type
ggplot(data=person_km , aes(x=highway, y=dist_perc, group=factor(weighting), fill=factor(weighting))) +
geom_col(position=position_dodge(0.7), colour="black") +
ggtitle("Percentage of Total Flow Traversing Different Highway Types") +
labs(x = "Highway Type", y = "% of Total Flow", fill = "weighting") +
scale_y_continuous(labels = scales::comma_format()) +                         # add comma to y labels
scale_fill_brewer(palette = "Greys", name="Weighting Profile" , direction=-1) +                                        # for nice color schemes
# edit angle of text, hjust argument so that text stays below plot AND center plot title
theme_minimal() +
#theme(axis.text.x = element_text(angle=50, hjust=1), plot.title = element_text(hjust = 0.5)) +
coord_flip() -> p
p
ggsave(path = paste0("../data/", chosen_city,"/Plots"),
file=paste0("perc_person-km-per-highway-type_", chosen_city, ".png"), p, width = 10, height = 6)
# plot person-km on each highway type
ggplot(data=person_km , aes(x=highway, y=dist, group=factor(weighting), fill=factor(weighting))) +
geom_col(position=position_dodge(0.7), colour="black") +
ggtitle("Total Person KM Traversing \nDifferent Highway Types") +
labs(x = "Highway Type", y = "Distance (km) Weighted By Flow", fill = "weighting") +
scale_y_continuous(labels = scales::comma_format()) +                         # add comma to y labels
scale_fill_brewer(palette = "Greys", name="Weighting Profile", direction=-1) +          # for nice color schemes
theme_minimal() +
# edit angle of text, hjust argument so that text stays below plot AND center plot title
theme(axis.text.x = element_text(angle=30, hjust=1), plot.title = element_text(hjust = 0.5)) +
coord_flip() -> p
p
ggsave(path = paste0("../data/", chosen_city,"/Plots"),
file=paste0("person-km-per-highway-type_", chosen_city, ".png"), p, width = 10, height = 6)
###### PLOT HIGHWAY TYPES ######
# I am not plotting the graph directly as it only has the roads that had flow. I will download the OSM
# data and filter it to the bounding box of the graph
# get bounding box for downloading data
#get bb
pts <- st_coordinates(graph_sf_weighted)
# download using dodgr
roads <- dodgr_streetnet(pts = pts, expand = 0)
# filter to graph boundary
roads <- st_filter(roads, graph_sf_weighted)
x <- roads %>%
dplyr::filter(!(highway %in% c('trunk_link', 'track', 'tertiary_link', 'steps',
'secondary_link', 'primary_link', 'living_street',
'motorway_link', 'path', 'service', 'unclassified',
NA, 'road')))
tm_shape(x) +
tm_lines(col = 'gray95') +
tm_shape(x) +
tm_lines(col = 'highway',
scale = 1.5,     #multiply line widths by 3
palette = "Set2") +
tm_layout(title = "OSM Road Types - All Roads",
title.size = 1.2,
title.color = "azure4",
title.position = c("left", "top"),
inner.margins = c(0.1, 0.25, 0.1, 0.1),    # bottom, left, top, and right margin
fontfamily = 'Georgia',
#legend.position = c("right", "bottom"),
frame = FALSE) -> p
tmap_save(tm = p, filename = paste0("../data/", chosen_city,"/Plots/osm_road_types_all.png"))
#### Roads with Routed Flow Only
#remove highway types that have very little share (for plotting purposes)
x <- graph_sf_weighted %>%
dplyr::filter(!(highway %in% c('trunk_link', 'track', 'tertiary_link', 'steps',
'secondary_link', 'primary_link', 'living_street',
'motorway_link', 'path', 'service', 'unclassified')))
tm_shape(x) +
tm_lines(col = 'gray95') +
tm_shape(x) +
tm_lines(col = 'highway',
scale = 1.5,     #multiply line widths by 3
palette = "Set2") +
tm_layout(title = "OSM Road Types - Only Roads with Routed Flow",
title.size = 1.2,
title.color = "azure4",
title.position = c("left", "top"),
inner.margins = c(0.1, 0.25, 0.1, 0.1),    # bottom, left, top, and right margin
fontfamily = 'Georgia',
#legend.position = c("right", "bottom"),
frame = FALSE) -> p
tmap_save(tm = p, filename = paste0("../data/", chosen_city,"/Plots/osm_road_types_routed.png"))
#### FACET PLOT OF ROAD TYPES ####
tm_shape(x) +
tm_lines(col = "darkgrey") +
tm_facets(by="highway",
nrow = 2,
free.coords=FALSE)  +  # so that the maps aren't different sizes
tm_layout(fontfamily = 'Georgia',
main.title = "Road Types", # this works if you need it
main.title.size = 1.2,
main.title.color = "azure4",
main.title.position = "left",
legend.outside.position = "bottom" ,
legend.outside.size = .1,
#inner.margins = c(0.01, 0.01, 0.01, 0.01),
frame = FALSE)  -> p
tmap_save(tm = p, filename = paste0("../data/", chosen_city,"/Plots/osm_road_types_facet.png"),
width=10, height=6)
###### FACET PLOT OF FLOWS. works but v slow (2 mins) ######
# 1. default weighting
facet_1 <- graph_sf_weighted %>%
dplyr::filter(!(highway %in% c('trunk_link', 'track', 'tertiary_link', 'steps',
'secondary_link', 'primary_link', 'living_street',
'motorway_link', 'path', 'service', 'unclassified')))
tm_shape(facet_1) +
tm_lines(col = 'gray92') +
tm_shape(facet_1) +
tm_lines(lwd = "flow",
scale = 8,  #multiply line widths by scale
col = "darkgreen") +
tm_facets(by="highway",
nrow = 2,
free.coords=FALSE)  +  # so that the maps aren't different sizes
tm_layout(fontfamily = 'Georgia',
main.title = "Flow on Weighted Network", # this works if you need it
main.title.size = 1.3,
main.title.color = "azure4",
main.title.position = "left",
legend.outside.position = "bottom" ,
legend.outside.size = .1,
#inner.margins = c(0.01, 0.01, 0.01, 0.01),
frame = FALSE)  -> p
tmap_save(tm = p, filename = paste0("../data/", chosen_city,"/Plots/flows_facet_weighted_", chosen_city, ".png"),
width=10, height=6)
# 2. Unweighted
facet_2 <- graph_sf_unweight %>%
dplyr::filter(!(highway %in% c('trunk_link', 'track', 'tertiary_link', 'steps',
'secondary_link', 'primary_link', 'living_street',
'motorway_link', 'path', 'service', 'unclassified')))
tm_shape(facet_2) +
tm_lines(col = 'gray92') +
tm_shape(facet_2) +
tm_lines(lwd = "flow",
scale = 8,  #multiply line widths by scale
col = "darkgreen") +
tm_facets(by="highway",
nrow = 2,
free.coords=FALSE)  +  # so that the maps aren't different sizes
tm_layout(fontfamily = 'Georgia',
main.title = "Flow on Unweighted Network", # this works if you need it
main.title.size = 1.3,
main.title.color = "azure4",
main.title.position = "left",
legend.outside.position = "bottom" ,
legend.outside.size = .1,
frame = FALSE)  -> p
tmap_save(tm = p, filename = paste0("../data/", chosen_city,"/Plots/flows_facet_unweighted_", chosen_city, ".png"),
width=10, height=6)
# 3. Trunk weight
# facet_3 <- graph_sf_trunk %>%
#   dplyr::filter(!(highway %in% c('trunk_link', 'track', 'tertiary_link', 'steps',
#                                  'secondary_link', 'primary_link', 'living_street',
#                                  'motorway_link', 'path', 'service', 'unclassified')))
# tm_shape(facet_3) +
#   tm_lines(col = 'gray92') +
# tm_shape(facet_3) +
#   tm_lines(lwd = "flow",
#            scale = 8,  #multiply line widths by scale
#            col = "darkgreen") +
# tm_facets(by="highway",
#           nrow = 2,
#           free.coords=FALSE)  +  # so that the maps aren't different sizes
# tm_layout(fontfamily = 'Georgia',
#           main.title = "Reduced Impedence on Trunk Roads", # this works if you need it
#           main.title.size = 1.3,
#           main.title.color = "azure4",
#           main.title.position = "left",
#           legend.outside.position = "bottom" ,
#           legend.outside.size = .1,
#           frame = FALSE)  -> p
#
# tmap_save(tm = p, filename = paste0("../data/", chosen_city,"/Plots/flows_facet_trunk.png"),
#           width=10, height=6)
# Facet map with one road type and different weighting profiles
road_type <- "trunk"
# this needs to be edited manually based on the road type and observing the ranges of the different plots
lwd_legend = c(250, 500, 750, 1000, 1500, 2000)
plot1 <- graph_sf_weighted %>%
dplyr::filter(highway == road_type)
tm_shape(facet_1) +
tm_lines(col = 'gray92') +
tm_shape(plot1) +
tm_lines(lwd = "flow",
#lwd.legend = lwd_legend,
scale = 3,  #multiply line widths by scale
col = "darkgreen") +
tm_layout(fontfamily = 'Georgia',
title = "Weighted", # this works if you need it
title.size = 1,
title.color = "azure4",
#inner.margins = c(0, 0, 0.03, 0),
#legend.outside = TRUE,
#legend.outside.position = "bottom",
#legend.title.size=0.85,
legend.show = FALSE,
#legend.position = c("right", "bottom"),
frame = FALSE)  -> p1
plot2 <- graph_sf_unweight %>%
dplyr::filter(highway == road_type)
tm_shape(facet_2) +
tm_lines(col = 'gray92') +
tm_shape(plot2) +
tm_lines(lwd = "flow",
#lwd.legend = lwd_legend,
scale = 3,  #multiply line widths by scale
col = "darkgreen",
legend.lwd.is.portrait = TRUE) +
tm_layout(fontfamily = 'Georgia',
title = "Unweighted",
title.size = 1,
title.color = "azure4",
#inner.margins = c(0, 0, 0.05, 0),
#legend.outside = TRUE,
#legend.outside.position = "right",
#legend.title.size=0.85,
legend.show = FALSE,
#legend.position = c("right", "bottom"),
frame = FALSE)  +
tm_scale_bar(color.dark = "gray60") -> p2
# plot3 <- graph_sf_trunk %>%
#   dplyr::filter(highway == road_type)
#
# tm_shape(facet_3) +
#   tm_lines(col = 'gray92') +
#   tm_shape(plot2) +
#   tm_lines(lwd = "flow",
#            #lwd.legend = lwd_legend,
#            scale = 3,  #multiply line widths by scale
#            col = "darkgreen") +
#   tm_layout(fontfamily = 'Georgia',
#             title = "Trunk Permitted", # this works if you need it
#             title.size = 1,
#             title.color = "azure4",
#             #inner.margins = c(0, 0, 0.03, 0),
#             #legend.outside = TRUE,
#             #legend.outside.position = "bottom",
#             #legend.title.size=0.85,
#             legend.show = FALSE,
#             #legend.position = c("right", "bottom"),
#             frame = FALSE)  -> p3
### legend only
tm_shape(plot1) +
tm_lines(lwd = "flow",
scale = 3,
col = "darkgreen",
legend.lwd.is.portrait = TRUE) +
tm_layout(fontfamily = 'Georgia',
legend.position = c("left", "top"),
legend.title.size=0.85,
legend.only = TRUE)  -> legend
facet_road_type <- tmap_arrange(p1, p2, legend, nrow=1)
tmap_save(tm = facet_road_type, filename = paste0("../data/", chosen_city,"/Plots/", road_type, chosen_city, "_facet.png"),
height=4, width= 9)
rm(dist_def, dist_tr, dist_unw, dist_weight,facet_1, facet_2, facet_3, facet_road_type, graph_sf_default,
graph_sf_trunk, graph_sf_unweight, graph_sf_weighted, legend, p, p1, p2, p3, person_km, plot1, plot2, plot3,
pts, roads, x, lwd_legend, road_type)
library(sf)
library(sfnetworks)
library(tidygraph)
library(tidyverse)
library(tmap)
edges2 <- read_csv(paste0("../data/", chosen_city,"/flows_for_aggregated_routing_opt_3.csv"))
View(edges2)
edges <- read_csv(paste0("../data/", chosen_city,"/flows_for_desire_lines.csv"))
View(edges)
rm(edges2)
#tidygraph
nodes <- st_read(paste0("../data/", chosen_city,"/msoa_lon_lat.shp"))
edges <- read_csv(paste0("../data/", chosen_city,"/flows_for_desire_lines.csv"))
# convert edge dataframe to graph
graph <- as_tbl_graph(edges, directed = FALSE)
# choose an a community detection algorithm and assign MSOAs to groups (weight is the flow)
graph_louvain <- graph %>%  activate(nodes) %>%
mutate(group = group_louvain(weights = `potential_demand`))
# extract nodes so that you can join group results onto the M
community_assignment <- graph_louvain %>% activate("nodes") %>% as_tibble()
# join group result to each MSOA
nodes <- nodes %>% dplyr::left_join(community_assignment, by =  c("msoa11cd" = "name"))
# count number of MSOAs in each group
nodes %>% st_drop_geometry() %>%
group_by(group) %>%
summarize(count = n()) %>% arrange(desc(count))
# read in msoa border geometry
msoa_borders <- st_read(paste0("../data/", chosen_city,"/msoas_geometry.shp"))
plot(st_geometry(msoa_borders))
plot(nodes['group'], add = TRUE)
# read in road edges with aggregated flow data
road_segments <- readRDS(paste0("../data/", chosen_city,"/graph_with_flows_weighted.RDS"))
# plot
plot(st_geometry(msoa_borders))
plot(st_geometry(road_segments), add = TRUE, col = "darkred")
############### 2. ASSIGNING COMMUNITIES TO EDGES ###############
# We need to assign a community to each edge. I am doing this in two steps:
# 1. Assign each edge to an MSOA
# 2. Assign each edge to the same community of its MSOA
########## 2.1: FUNCTION FOR ASSIGNING ROAD EDGES TO MSOAS ###########
# Below function does the following:
# if road segment does not intersect with any msoa border, snap it to the nearesr msoa centroid
# if road segment interect (crosses) more than one msoa border, calculate the length of intersection with
# with all intersecting MSOAs and assign it to the one it intersect with most
# if road segment falls completely within one msoa, assign it to that msoa
assign_edge_to_polygon = function(x, y, z) {
# x = sf with linestring features (road edges)
# y = sf with polygon features (msoa borders)
# z = sf with point features (msoa centroids)
##############
#### this function requires a column in y and z named msoa11cd!!!! ####
###############
if (inherits(x, "sf")) n = nrow(x)
if (inherits(x, "sfc")) n = length(x)
out = do.call(c,
lapply(seq(n), function(i) {
# nrst is a list! It returns the msoa row number/s
nrst = st_intersects(st_geometry(x)[i], y)
# if intersect returns nothing, this edge is outside of all MSOA geometries
# get nearest msoa centroid to edge and assign it to it
if ( length (nrst[[1]]) == 0 ){
nrst = st_nearest_feature(st_geometry(x)[i], z)
msoa_code = as.character(z$msoa11cd[nrst[[1]]])
}
# if edge intersect with more than 1 msoa (does not fall completely inside 1), then
# find the length of intersection with each, and assign it to the one it intersects with more
else if ( length (nrst[[1]]) > 1 ){
# gets the msoa list position of the biggest intersection (intersection length with the different msoas is compared first)
a = which.max(st_length(st_intersection(st_geometry(x)[i], y)))
# [[1]] to get the list element with the intersecting msoas
# nrst is assigned to the msoa return from a
nrst =  nrst[[1]][a]
msoa_code = as.character(y$msoa11cd[nrst[[1]]])
}
# if edge falls completely inside 1 msoa, assign it to that msoa
else {
msoa_code = as.character(y$msoa11cd[nrst[[1]]])
}
# in all cases above, we get the msoa code by pointing to df$column[row number],
# where row number is retrieved from the nrst list through nrst[[1]]....ropey
return(msoa_code)
})
)
out = dplyr::as_tibble(out)
return(out)
}
# use function to assign each edge to an msoa. length of result = length of x
edge_msoas <- assign_edge_to_polygon(x =road_segments, y = msoa_borders, z = nodes)
# rename the column before binding
edge_msoas <- edge_msoas %>% rename(assigned_msoa = value)
# bind results to original road_segments sf
road_segments <- dplyr::bind_cols(road_segments, edge_msoas)
# plot for quick inspection
plot(st_geometry(msoa_borders))
plot(st_geometry(nodes), col = "grey", add = TRUE)
plot(road_segments['assigned_msoa'], add=TRUE)
###### 2.2: ASSIGN EACH EDGE TO THE SAME COMMUNITY AS ITS ASSOCIATED MSOA #######
road_segments <- road_segments %>% dplyr::left_join(community_assignment, by =  c("assigned_msoa" = "name"))
# quick plot
plot(road_segments['group'])
#################### 3. MAPPING  ######################
# 3.1. map of msoa centroids colored by community
# convert to character for legend
nodes$Community <- as.character(nodes$group)
tm_shape(msoa_borders) +
tm_borders(col = "grey80") +
tm_shape(nodes) +
tm_dots(col = "Community",
size = 0.1,
palette = "Dark2") +
tm_layout(fontfamily = 'Georgia',
legend.show = FALSE,
frame = FALSE) -> tm1
# 3.2. map of road segments colored by community
# convert group column to categorical so that we don't get 1-1.5, 2-2.5 etc in the legend
road_segments$Community <- as.character(road_segments$group)
tm_shape(road_segments) +
tm_lines(#title = "Community",
col = "Community",
palette = "Dark2") +
tm_layout(fontfamily = 'Georgia',
legend.show =FALSE,
frame = FALSE) +
tm_scale_bar(color.dark = "gray60") -> tm2
# 3.3  get legend only for facet map
tm_shape(road_segments) +
tm_lines(col = "Community",
palette = "Dark2") +
tm_layout(fontfamily = 'Georgia',
legend.only=TRUE,
frame = FALSE) -> tm_leg
# can do a tmap arrange here but am I bovered?!
tm_facet <- tmap_arrange(tm1, tm2, tm_leg, nrow=1)
#save
tmap_save(tm = tm_facet, filename = paste0("../data/", chosen_city,"/Plots/communities_", chosen_city, ".png"),
width=8.5, height=4)
# 3.4  MSOAs as cloropleth/choropleth/whatever
# add communitiy column to polygon geometry to create cloropleth map
msoa_borders <- nodes %>%
st_drop_geometry %>%
dplyr::select(msoa11cd, Community) %>%
right_join(msoa_borders, by = 'msoa11cd') %>%
st_as_sf()
tm_shape(msoa_borders) +
tm_fill(col = "Community",
palette = "Dark2") +
tm_layout(fontfamily = 'Georgia',
legend.show = FALSE,
frame = FALSE) -> tm3
tm_facet2 <- tmap_arrange(tm3, tm2, tm_leg, nrow=1)
tmap_save(tm = tm_facet2, filename = paste0("../data/", chosen_city,"/Plots/communities_alternative_", chosen_city, ".png"),
width=8.5, height=4)
# tmap with only the filled out MSOAs
tm_shape(msoa_borders) +
tm_fill(col = "Community",
palette = "Dark2") +
tm_layout(fontfamily = 'Georgia',
frame = FALSE) +
tm_scale_bar(color.dark = "gray60") -> tm_single
tmap_save(tm = tm_single, filename = paste0("../data/", chosen_city,"/Plots/communities_msoas", chosen_city, ".png"))
# save road_segments as an RDS to work with in the next script
saveRDS(road_segments, file = paste0("../data/", chosen_city, "/graph_with_flows_weighted_communities.Rds"))
# CLEAR ENVIRONMENT!!!
rm(community_assignment, edge_msoas, edges, graph, graph_louvain, msoa_borders, nodes, road_segments,
tm_facet, tm_facet2, tm_leg, tm1, tm2, tm3, tm_single, assign_edge_to_polygon)
