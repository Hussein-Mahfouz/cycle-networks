# ---------------------------------------------------------------------------------------------------- #
#########################
###### PLOTS #####
#########################
# # CREATE GROUPED COLUMN BY DISTANCE
# # change distance from m to km
# uptake_decay$dist2 <- uptake_decay$dist / 1000
# # group data by distance. Change 'by' to edit number of groups
# uptake_decay$distance_groups <- cut(uptake_decay$dist2, breaks = seq(from = 0, to = 50, by = 1))
#
# # edit the distance group column to replace (0,1] with 0-1km
# #  \\ used when replacing "(" to avoid error
# # https://stackoverflow.com/questions/9449466/remove-parenthesis-from-a-character-string
# uptake_decay <- uptake_decay %>%
#   mutate(distance_groups = gsub("\\(", "", distance_groups)) %>%
#   mutate(distance_groups = gsub("]", " km", distance_groups)) %>%
#   mutate(distance_groups = gsub(",", "-", distance_groups))
#
#
# # Group them for better graph (Reduce number of lines from 10 to 5). Use embedded ifelse
# uptake_decay$distance_groups_comb <- ifelse(uptake_decay$distance_groups %in% c("0-1 km", "1-2 km"), "0-2 km",
#                                        ifelse(uptake_decay$distance_groups %in% c("2-3 km", "3-4 km"), "2-4 km",
#                                          ifelse(uptake_decay$distance_groups %in% c("4-5 km", "5-6 km"), "4-6 km",
#                                            ifelse(uptake_decay$distance_groups %in% c("6-7 km", "7-8 km"), "6-8 km",
#                                              ifelse(uptake_decay$distance_groups %in% c("8-9 km", "9-10 km"), "8-10 km",
#                                                uptake_decay$distance_groups)))))
#
#
# # Mode Share Increase VS Performance (Under/Over) - geom smooth
#
# # uptake_decay %>% filter(!(is.na(distance_groups))) %>%
# #   filter(distance_groups %in% c("0-1 km", "1-2 km", "2-3 km", "3-4 km", "4-5 km", "5-6 km",
# #                                 "6-7 km", "7-8 km", "8-9 km", "9-10 km")) %>%
# #   ggplot() +
# #   geom_smooth(aes(x = performance, y = (cycle_added_weighted / `All categories: Method of travel to work`) * 100,
# #                   color = distance_groups_comb)) +
# #   theme_minimal() +
# #   #scale_colour_brewer(palette = "Set3") +
# #   labs(title = "",
# #        x="Existing Cycling Mode Share As Fraction of Cycling Potential", y = "Cycling Mode Share Increase (%)",
# #        color = "Distance \nSeparating \nOD Pair")
#
# uptake_decay %>% filter(!(is.na(distance_groups))) %>%
#   filter(distance_groups %in% c("0-1 km", "1-2 km", "2-3 km", "3-4 km", "4-5 km", "5-6 km",
#                                 "6-7 km", "7-8 km", "8-9 km", "9-10 km")) %>%
#   ggplot() +
#   geom_smooth(aes(x = performance, y = (cycle_added_weighted / `All categories: Method of travel to work`) * 100,
#                   color = distance_groups_comb)) +
#   theme_minimal() +
#   #scale_colour_brewer(palette = "Blues") +
#   labs(title = "",
#        x=expression(paste("Performance (", alpha[ij],")")), y = "Cycling Mode Share Increase (%)",
#        color = "Distance Between \nOD Pair (km)")
#
# # uptake_decay %>% filter(!(is.na(distance_groups))) %>%
# #   filter(distance_groups %in% c("0-1 km", "1-2 km", "2-3 km", "3-4 km", "4-5 km", "5-6 km",
# #                                 "6-7 km", "7-8 km", "8-9 km", "9-10 km")) %>%
# #   ggplot() +
# #   geom_smooth(aes(x = performance, y = (cycle_added_weighted / `All categories: Method of travel to work`) * 100,
# #                   color = distance_groups_comb)) +
# #   theme(text = element_text(size=10)) +
# #   #scale_colour_brewer(palette = "Blues") +
# #   labs(title = "",
# #        x=TeX("Performance $\\alpha_{ij}$ = Cycling Mode Share $\\phi(c_{ij})$ / Probability of Cycling $P(c_{ij})$"),
# #        y = "Cycling Mode Share Increase (%)",
# #        color = "Distance Between \nOD Pair (km)")
#
#
# ggsave(paste0("../data/", chosen_city,"/Plots/mode_share_increase_vs_performance_smooth_" , chosen_city, ".png"))
#
#
#
#
# # Mode Share Increase VS Performance (Under/Over) - geom point
# uptake_decay %>% filter(!(is.na(distance_groups))) %>%
#   filter(distance_groups %in% c("0-1 km", "1-2 km", "2-3 km", "3-4 km", "4-5 km", "5-6 km",
#                                 "6-7 km", "7-8 km", "8-9 km", "9-10 km")) %>%
#   ggplot() +
#   geom_jitter(aes(x = performance, y = (cycle_added_weighted / `All categories: Method of travel to work`) * 100,
#                   color = distance_groups_comb)) +
#   theme_minimal() +
#   #scale_colour_brewer(palette = "Blues") +
#   labs(title = "",
#        x="Existing Cycling Mode Share As Fraction of Cycling Potential", y = "Cycling Mode Share Increase (%)",
#        color = "Distance Between \nOD Pair (km)")
#
# ggsave(paste0("../data/", chosen_city,"/Plots/mode_share_increase_vs_performance_point_",chosen_city, ".png"))
#
#
#
#
# #save csv for routing
# uptake_decay %>%
#   subset(select = c(`Area of residence`, `Area of workplace`, `potential_demand`)) %>%
#   write_csv(path = paste0("../data/",chosen_city, "/flows_for_aggregated_routing_opt_3.csv"))
#
# #save csv for plotting desire_lines (script: _3.2_plot_od_comparisons)
# uptake_decay %>%
#   write_csv(path = paste0("../data/",chosen_city, "/flows_for_desire_lines.csv"))
rm(cycle_add, cycle_current, cycle_perc_inc, multiply_factor, uptake_decay, uptake_no_intra, glm1,
rsq, potential_demand, flow)
###############################################################################
######### This script plots the data output from _3_potential_demand ##########
###############################################################################
library(tidyverse)
library(sf)
library(tmap)
library(latex2exp)
uptake_decay <- readr::read_csv(paste0("../data/",chosen_city,"/flows_for_desire_lines.csv"))
# turn distance to km
uptake_no_intra <- uptake_decay %>% dplyr::filter(`Area of residence` != `Area of workplace`)
uptake_no_intra$dist <- uptake_no_intra$dist / 1000
######## PLOT 1: DISTANCE VS TOTAL NO OF CYCLISTS #######
# Not informative as Total Commuting Trips are not equal
uptake_no_intra %>% dplyr::filter(dist <= 10) %>%
ggplot(aes(x = dist, y = Bicycle)) +
geom_point(color = "darkgrey") +
geom_smooth(color = "darkred") +
labs(x="Commuting Distance (km)", y = "Number of Trips Being Cycled",
title = "Number of Commuting Trips Cycled - All Trips Under 10km")
#### PLOT 2 : DISTANCE VS PERCENTAGE CYCLING
uptake_no_intra %>% dplyr::filter(dist <= 10) %>%
ggplot(aes(x = dist, y = perc_cycle)) +
geom_point(color = "darkgrey") +
geom_smooth(color = "darkred") +
labs(x="Commuting Distance (km)", y = "Fraction of Trips Being Cycled",
title = "Fraction of Commuting Trips Cycled - All Trips Under 10km")
##### PLOT 3: GROUPED STATISTICS - DISTANCE #####
# change distance from m to km
uptake_decay$dist <- uptake_decay$dist / 1000
# group data by distance. Change 'by' to edit number of groups
#uptake_decay$distance_groups <- cut(uptake_decay$dist, breaks = seq(from = 0, to = 50, by = 1))
uptake_decay_grouped <- uptake_decay %>%
group_by(distance_group = as.character(distance_groups)) %>%
summarise(distance_avg_group   = mean(dist),
group_perc_cycle = mean(perc_cycle) *100,
group_prob_cycle = mean(prob_cycle) *100)
# pivot to long format for ggplot with legend/color argument
uptake_distance_long <- uptake_decay_grouped %>% pivot_longer(cols = c(group_perc_cycle, group_prob_cycle))
ggplot(uptake_distance_long, aes(x = distance_avg_group, y = value, color = name)) +
geom_smooth() +
labs(x="Commuting Distance (km)", y = "% of Trips Cycled",
title = "Probabilty of Cycling \nBased on Distance and Slope") +
scale_color_discrete(name = "", labels = c("Actual", "Estimated"))
##### PLOT 4: GROUPED STATISTICS - SLOPE #####
# change slope to %
uptake_decay$slope <- uptake_decay$slope * 100
# create slope groups
uptake_decay$slope_group <- cut(uptake_decay$slope, breaks = seq(from = 0, to = 10, by = 0.25))
# group data by slope groups. Remove low levels of cycling as they distort percentages
uptake_decay_slope <- uptake_decay %>% filter(Bicycle >= 15) %>%
group_by(slope_group = as.character(slope_group)) %>%
summarise(slope_avg_group   = mean(slope),
group_perc_cycle = mean(perc_cycle) *100,
group_prob_cycle = mean(prob_cycle) *100)
# pivot to long format for ggplot with legend/color argument
uptake_slope_long <- uptake_decay_slope %>% pivot_longer(cols = c(group_perc_cycle, group_prob_cycle))
ggplot(uptake_slope_long, aes(x = slope_avg_group, y = value, color = name)) +
geom_smooth() +
labs(x="Commuting Distance (km)", y = "Number of Trips Being Cycled",
title = "Probabilty of Cycling Based on Distance and Slope") +
labs(x="Gradient %", y = "% Trips Cycled",
title = "Probabilty of Cycling Based on Distance and Slope") +
scale_color_discrete(name = "", labels = c("Actual", "Estimated"))
##### PLOT 5: UNDERPERFORMING VS OVERPERFORMING OD PAIRS #####
# add the group averages to the od data for plotting
uptake_decay <- uptake_decay %>% left_join(uptake_decay_grouped,
by = c("distance_groups" = "distance_group"))
# get the cycling % of each OD pair as a fraction of the distance_group average cycling %
uptake_decay$ratio <- uptake_decay$perc_cycle /  (uptake_decay$group_perc_cycle / 100)  # /100 as perc_cycler is fraction not %
### 5.1 - GGPLOT ###
#### CHECK THIS BEFORE yOU WRECK THIS
# remove 0 distance because they haven't been ssigned to groups
uptake_gg <- uptake_decay %>% filter(dist<10, dist!=0)
order <- c("0-1 km", "1-2 km", "2-3 km", "3-4 km", "4-5 km", "5-6 km",
"6-7 km", "7-8 km", "8-9 km", "9-10 km")
ggplot(uptake_gg, aes(x = factor(distance_groups, level = order), y = ratio)) +
geom_boxplot(outlier.size  = 0) +
ylim(NA, 5) +
geom_hline(yintercept=1, linetype="dashed",
color = "darkred", size=0.8)
### 5.2 - THEMATIC MAP IT ###
# MSOA CODES
# get the MSOA codes of MSOAs in the chosen city. Data retrieved from _2_distance_and_elevation
city_msoas <- readr::read_csv(paste0("../data/",chosen_city,"/msoa_codes_city.csv"))
# MSOA CENTROIDS
# get population weighted centroids from pct and change crs (default is northing)
city_centroids <- pct::get_centroids_ew() %>% st_transform(4326)
# keep only centroids of chosen city
city_centroids <- city_centroids %>% dplyr::filter(msoa11cd %in% city_msoas$MSOA11CD)
# MSOA BOUNDARIES
#get msoa boundaries for plotting
city_geom <- sf::st_read("../data-raw/MSOA_2011_Boundaries/Middle_Layer_Super_Output_Areas__December_2011__Boundaries.shp") %>%
st_transform(4326)
# filter only MSOAs in the city_msoas df
city_geom <- city_geom %>% dplyr::filter(msoa11cd %in% city_msoas$MSOA11CD)
# get straight line geometry of all OD pairs. Added as a geometry column
uptake_decay <- stplanr::od2line(uptake_decay, city_centroids)
uptake_decay <- sf::st_make_valid(uptake_decay)
# keep only od pairs <10km
uptake_plot <- uptake_decay %>% filter(dist <= 10)
# # plot all flows
# tm_shape(city_geom) +
#   tm_borders(col = "grey80",
#              lwd = 1,
#              alpha = 0.5) +
#   tm_shape(uptake_plot) +
#   tm_lines(title.col = "Ratio: OD Pair Cycling Mode Share / \nGroup Average Cycling Mode Share",
#            legend.lwd.show = FALSE,   # remove lineweight legend
#            #lwd = "perc_cycle",
#            lwd = 0.7,
#            #lwd = "ratio",
#            col = "ratio",
#            breaks = c(0, 0.2, 0.5, 1, 3, 10),
#            midpoint = 1,     # the color palette will split at this point
#            style = "fixed",
#            #palette = "RdYlGn",
#            palette = c('#d7191c', '#fdae61', '#ffffbf', '#a6d96a', '#1a9641'),
#            #style = "pretty",
#            scale = 2) +
#   tm_facets(by="distance_groups",
#             nrow = 2,
#             free.coords=FALSE,
#             showNA = FALSE) +
#   tm_layout(fontfamily = 'Georgia',
#             main.title = 'Comparison of Cycling Uptake Across the City',
#             main.title.color = 'grey50',
#             legend.title.size = 0.8,
#             frame = FALSE) -> p
tm_shape(city_geom) +
tm_borders(col = "grey80",
lwd = 1,
alpha = 0.5) +
tm_shape(uptake_plot) +
tm_lines(#title.col = "Ratio: OD Pair Cycling Mode Share / \nGroup Average Cycling Mode Share",
#title.col = TeX("$\\alpha_{ij} = \\phi(c_{ij}) / P(c_{ij})$"),
#title.col = TeX("Performance ($\\alpha_{ij})$"),
title.col = expression(paste("Performance (", alpha[ij],")")),
legend.lwd.show = FALSE,   # remove lineweight legend
#lwd = "perc_cycle",
lwd = 0.7,
#lwd = "ratio",
col = "performance",
breaks = c(0, 0.2, 0.5, 1, 3, 10),
midpoint = 1,     # the color palette will split at this point
style = "fixed",
#palette = "RdYlGn",
palette = c('#d7191c', '#fdae61', '#ffffbf', '#a6d96a', '#1a9641'),
#style = "pretty",
scale = 2) +
tm_facets(by="distance_groups",
nrow = 2,
free.coords=FALSE,
showNA = FALSE) +
tm_layout(fontfamily = 'Georgia',
main.title = paste0('Comparison of Cycling Uptake Across ', chosen_city),
main.title.color = 'grey50',
legend.title.size = 0.8,
frame = FALSE) -> p
#save
tmap_save(tm = p, filename = paste0("../data/", chosen_city,"/Plots/facet_desire_lines_all.png"),
width=9, height=4)
# keep only underperforming OD pairs
uptake_low <- uptake_plot %>% filter(ratio < 1)
tm_shape(city_geom) +
tm_borders(col = "grey80",
lwd = 1,
alpha = 0.5) +
tm_shape(uptake_low) +
tm_lines(title.col = "Ratio: OD Pair Cycling Mode Share / \nGroup Average Cycling Mode Share",
legend.lwd.show = FALSE,   # remove lineweight legend
lwd = 0.7,
col = "ratio",
breaks = c(0, 0.2, 0.5, 0.8, 1),
style = "fixed",
palette = "-OrRd",
scale = 2) +
tm_facets(by="distance_groups",
nrow = 2,
free.coords=FALSE,
showNA = FALSE) +
tm_layout(fontfamily = 'Georgia',
main.title = 'OD Pairs with Cycling Mode Share Below Group Average',
main.title.color = 'grey50',
frame = FALSE) -> p
#save
tmap_save(tm = p, filename = paste0("../data/", chosen_city,"/Plots/facet_desire_lines_below_avg.png"),
width=9, height=4)
# keep only overperforming OD pairs
uptake_high <- uptake_plot %>% filter(ratio >= 1)
tm_shape(city_geom) +
tm_borders(col = "grey80",
lwd = 1,
alpha = 0.5) +
tm_shape(uptake_high) +
tm_lines(title.col = "Ratio: OD Pair Cycling Mode Share / Group Average Cycling Mode Share",
legend.lwd.show = FALSE,   # remove lineweight legend
lwd = 0.7,
col = "ratio",
breaks = c(1, 2, 5, 8, 10),
style = "fixed",
palette = "GnBu",
scale = 2) +
tm_facets(by="distance_groups",
nrow = 2,
free.coords=FALSE,
showNA = FALSE) +
tm_layout(fontfamily = 'Georgia',
main.title = 'OD Pairs with Cycling Mode Share Above Group Average',
main.title.color = 'grey50',
frame = FALSE) -> p
#save
tmap_save(tm = p, filename = paste0("../data/", chosen_city,"/Plots/facet_desire_lines_above_avg.png"),
width=9, height=4)
##### PLOT 6: DISTRIBUTION OF ADDITIONAL FLOWS #####
# get data in long format for ggplot
uptake_decay %>% st_drop_geometry() %>%
select(dist, perc_cycle, cycle_fraction) %>%
mutate(perc_cycle = perc_cycle*100,
cycle_fraction = cycle_fraction*100) %>%
pivot_longer(cols = c(perc_cycle, cycle_fraction)) -> p
# plot
ggplot(p, aes(x= dist, y=value, color = name)) +
geom_smooth() +
labs(title = paste0('Distribution of Cycling Increase \nif Mode Share Reaches ', round(cycle_target*100), '%'),
x="Commuting Distance (km)", y = "Cycling Mode Share (%)") +
scale_color_manual(name = "", labels = c("Potential", "Current"), values=c("darkgreen", "darkred")) +
theme_minimal() #+
#ylim(0, NA)
#save
ggsave(paste0("../data/", chosen_city,"/Plots/cycling_increase_line.png"), width = 6, height = 6)
# clear environment
rm(city_centroids, city_geom, city_msoas, p, uptake_decay, uptake_decay_grouped,
uptake_decay_slope, uptake_distance_long, uptake_gg, uptake_high, uptake_low,
uptake_no_intra, uptake_plot, uptake_slope_long, cycle_target, order)
library(dplyr)
library(pct)
library(stplanr)
library(tmap)
library(lwgeom)
# FLOW DATA
# get the flow for the chosen city: data retrieved in Script 1 _1_get_flow_data
city_od <- readr::read_csv(paste0("../data/", chosen_city, "/flows_city.csv"))
# MSOA CODES
# get the MSOA codes of MSOAs in the chosen city. Data retrieved from _2_distance_and_elevation
city_msoas <- readr::read_csv(paste0("../data/",chosen_city,"/msoa_codes_city.csv"))
# MSOA CENTROIDS
# get population weighted centroids from pct and change crs (default is northing)
city_centroids <- pct::get_centroids_ew() %>% st_transform(4326)
# keep only centroids of chosen city
city_centroids <- city_centroids %>% dplyr::filter(msoa11cd %in% city_msoas$MSOA11CD)
# MSOA BOUNDARIES
#get msoa boundaries for plotting
city_geom <- sf::st_read("../data-raw/MSOA_2011_Boundaries/Middle_Layer_Super_Output_Areas__December_2011__Boundaries.shp") %>%
st_transform(4326)
# filter only MSOAs in the city_msoas df
city_geom <- city_geom %>% dplyr::filter(msoa11cd %in% city_msoas$MSOA11CD)
#POTENTIAL FLOW (Script 3)
city_potential_cycling <- read_csv(paste0("../data/",chosen_city, "/flows_for_aggregated_routing_opt_3.csv"))
# add potential flow column to city_od df
city_od <- city_od %>% left_join(city_potential_cycling,
by = c("Area of residence" = "Area of residence",
"Area of workplace" = "Area of workplace"))
# some OD pairs don't exist in potential flow. It means they have 0 potential flow
city_od$potential_demand[is.na(city_od$potential_demand)] <- 0
# get straight line geometry of all OD pairs in city_od
desire_lines <- stplanr::od2line(city_od, city_centroids)
desire_lines <- lwgeom::st_make_valid(desire_lines)
desire_lines <- sf::st_make_valid(desire_lines)
# filter out all OD pairs with flow less than this:
flow_threshold_all <- 50
desire_lines_all <- desire_lines %>%
dplyr::filter(`All categories: Method of travel to work` >= flow_threshold_all)
# plot all flows
tm_shape(city_geom) +
tm_borders(col = "grey80",
lwd = 1,
alpha = 0.5) +
tm_shape(desire_lines_all) +
tm_lines(title.col = "Flow - All Modes",
legend.lwd.show = FALSE,   # remove lineweight legend
lwd = "All categories: Method of travel to work",
col = "All categories: Method of travel to work",
palette = "YlOrRd",
style = "pretty",
scale = 9) +
tm_layout(fontfamily = 'Georgia',
frame = FALSE)
# plot for cycling ridership
flow_threshold_cycling <- 5
desire_lines_cycling <- desire_lines %>%
dplyr::filter(Bicycle >= flow_threshold_cycling)
# plot cycling flows
tm_shape(city_geom) +
tm_borders(col = "grey80",
lwd = 1,
alpha = 0.5) +
tm_shape(desire_lines_cycling) +
tm_lines(title.col = "Flow - Cycling",
legend.lwd.show = FALSE,   # remove lineweight legend
lwd = "Bicycle",
col = "Bicycle",
palette = "YlOrRd",
style = "pretty",
scale = 9) +
tm_layout(fontfamily = 'Georgia',
frame = FALSE)
desire_cycling_long <- desire_lines_cycling %>%
dplyr::select(`Area of residence`, `Area of workplace`, Bicycle, potential_demand)
# pivot for facet plot
desire_cycling_long <- desire_cycling_long %>% pivot_longer(cols = c(Bicycle, potential_demand)) %>%
st_as_sf()
tm_shape(city_geom) +
tm_borders(col = "grey80",
lwd = 1,
alpha = 0.5) +
tm_shape(desire_cycling_long) +
tm_lines(title.col = "Cycling Demand (Commuters)",
lwd = "value",
col= "value",
palette = "YlOrRd",
style = "pretty",
scale = 5,
legend.col.is.portrait = FALSE,
legend.lwd.show = FALSE) +   # remove lineweight legend)
tm_facets(by="name",
nrow = 1,
free.coords=FALSE) +  # so that the maps aren't different sizes
tm_layout(fontfamily = 'Georgia',
panel.labels = c('Existing Cycling Demand', 'Potential Cycling Demand'),
panel.label.size = 1.3,
frame.lwd = NA,    # remove facet title frames
panel.label.bg.color = NA,   # remove facet title background
legend.outside = TRUE,
legend.outside.position = 'bottom',
frame = FALSE) +
tm_scale_bar(color.dark = "gray60") -> p
p
#save
tmap_save(tm = p, filename = paste0("../data/", chosen_city,"/Plots/desire_facet_cycling.png"),
width=8, height=6)
# clear environment
rm(city_centroids, city_geom, city_msoas, city_od, city_potential_cycling, desire_cycling_long,
desire_lines, desire_lines_all, desire_lines_cycling, flow_threshold_all, flow_threshold_cycling, p)
# read in the data
flow <- readr::read_csv(paste0("../data/",chosen_city,"/flows_dist_elev_for_potential_flow.csv"))
# replace NA values with the mean slope
flow$slope[is.na(flow$slope)] <- mean(na.omit(flow$slope))
# create a copy of the df
uptake_decay <- flow
# What to do with dist= NA
#opt 1. Remove these rows
uptake_decay <- uptake_decay %>% filter(!is.na(dist))
# get % of cyclists
uptake_decay$perc_cycle <- uptake_decay$Bicycle / uptake_decay$`All categories: Method of travel to work`
# get % increase in cycling as distance decay
uptake_decay$prob_cycle = pct::uptake_pct_govtarget_2020(distance = uptake_decay$dist, gradient = uptake_decay$slope)
ggplot(uptake_decay) +
geom_point(aes(dist, prob_cycle)) +
labs( x="Commuting Distance (km)", y = "Uptake (%)")
# see over and under performers (performance < 1 : underperforming, and so has more potential cyclists)
uptake_decay$performance <- uptake_decay$perc_cycle / uptake_decay$prob_cycle
ggplot(uptake_decay, aes(x = performance)) +
geom_histogram(color = "black", alpha = 0.5, binwidth = 0.25) +
geom_vline(xintercept = 1, linetype="dotted", size=0.5) +
labs(x="Existing Cycling Mode Share As a Fraction of Cycling Potential", y = "No. of OD Pairs")
# Calculate POTENTIAL DEMAND
uptake_decay <- uptake_decay %>%
# Get the additional number of cycling trips for each OD pair
mutate(cycle_added_weighted = round((`All categories: Method of travel to work` - Bicycle) * prob_cycle)) %>%
mutate(cycle_added_weighted2 = round((`All categories: Method of travel to work` - Bicycle) * prob_cycle) * exp(-(log(2)*performance))) %>%
# add additional trips to existing bicycle trips to get total potential demand
mutate(potential_demand = cycle_added_weighted + Bicycle)
View(uptake_decay)
# Calculate POTENTIAL DEMAND
uptake_decay <- uptake_decay %>%
# Get the additional number of cycling trips for each OD pair
mutate(cycle_added_weighted = round((`All categories: Method of travel to work` - Bicycle) * prob_cycle)) %>%
mutate(cycle_added_weighted2 = round(((`All categories: Method of travel to work` - Bicycle) * prob_cycle) * exp(-(log(2)*performance)))) %>%
# add additional trips to existing bicycle trips to get total potential demand
mutate(potential_demand = cycle_added_weighted + Bicycle)
ggplot(uptake_decay, aes(x=cycle_added_weighted, y=cycle_added_weighted2)) +
geom_point()+
geom_smooth()
uptake_decay %>% select(performance, cycle_added_weighted, cycle_added_weighted2)
uptake_decay %>% select(performance, cycle_added_weighted, cycle_added_weighted2) %>%
pivot_longer(!performance)
uptake_decay %>% select(performance, cycle_added_weighted, cycle_added_weighted2) %>%
pivot_longer(!performance) %>%
ggplot(aes(x=performace, y=value, color - name)) +
geom_point()+
geom_smooth()
uptake_decay %>% select(performance, cycle_added_weighted, cycle_added_weighted2) %>%
pivot_longer(!performance) %>%
ggplot(aes(x=performance, y=value, color - name)) +
geom_point()+
geom_smooth()
uptake_decay %>% select(performance, cycle_added_weighted, cycle_added_weighted2) %>%
pivot_longer(!performance) %>%
ggplot(aes(x=performance, y=value, color = name)) +
geom_point()+
geom_smooth()
uptake_decay %>% select(performance, cycle_added_weighted, cycle_added_weighted2) %>%
pivot_longer(!performance) %>%
ggplot(aes(x=performance, y=value, color = name)) +
geom_smooth()
uptake_decay %>% select(performance, cycle_added_weighted, cycle_added_weighted2) %>%
pivot_longer(!performance, names_to = "method", values_to = "additional cyclists") %>%
ggplot(aes(x=performance, y=`additional cyclists`, color = method)) +
geom_smooth()
getwd()
options(tinytex.verbose = TRUE)
